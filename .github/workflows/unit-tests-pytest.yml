name: Unit Tests

on: [push]

jobs:
  build:
    name: Test with py${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # python-version: ['3.7', '3.8', '3.9', '3.10']
        python-version: ['3.7', '3.8', '3.9']
      max-parallel: 5

    steps:
    - uses: actions/checkout@v2

    - name: Create Python ${{ matrix.python-version }} environment
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: environment.yml
        environment-name: anaconda-test-env-py-${{ matrix.python-version }}

    - name: Diagnostics
      shell: bash -l {0}
      run: |
        micromamba info
        micromamba list
        conda config --show-sources
        conda config --show
        micromamba env list
        printenv | sort

    - name: Start EPICS IOCs in Docker
      shell: bash -l {0}
      run: |
        bash ./.github/scripts/start_xxx.sh gp
        bash ./.github/scripts/start_adsim.sh ad
        docker ps -a

    # - name: Install EPICS dependencies
    #   shell: bash -l {0}
    #   run: |
    #     mamba install epics-base "readline!=8.1.2" --name $ENV_NAME
    #     mamba list -r --name $ENV_NAME
    #   # env:
    #   #   PY_VER: ${{ matrix.python-version }}
    #   #   ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}

    - name: Run EPICS PV tests with caget
      shell: bash -l {0}
      run: |
        source $CONDA/bin/activate $ENV_NAME
        which caget
        caget gp:UPTIME
        caget ad:cam1:Acquire_RBV
      # env:
      #   PY_VER: ${{ matrix.python-version }}
      #   ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}

    # $CONDA is an environment variable pointing to the
    # root of the miniconda directory

    # - name: Install Python package requirements
    #   run: |
    #     mamba env update --file environment.yml --name $ENV_NAME
    #     mamba list -r --name $ENV_NAME
    #   env:
    #     PY_VER: ${{ matrix.python-version }}
    #     ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}

    # - name: Pip install additional package requirements
    #   run: |
    #     source $CONDA/bin/activate $ENV_NAME
    #     # diagnostic
    #     conda list cover
    #     #
    #     pip install --pre databroker tiled[all] area_detector_handlers
    #     pip install -U coveralls
    #     mamba list -r --name $ENV_NAME
    #   env:
    #     PY_VER: ${{ matrix.python-version }}
    #     ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}

    - name: Confirm EPICS IOC is available via caget
      shell: bash -l {0}
      run: |
        source $CONDA/bin/activate $ENV_NAME
        caget gp:UPTIME
        caget ad:cam1:Acquire_RBV
      # env:
      #   PY_VER: ${{ matrix.python-version }}
      #   ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}
      #   PV: gp:UPTIME

    - name: Confirm EPICS IOC is available via PyEpics
      shell: bash -l {0}
      run: |
        source $CONDA/bin/activate $ENV_NAME
        python -c "import epics; print(epics.caget('gp:UPTIME'))"
      # env:
      #   PY_VER: ${{ matrix.python-version }}
      #   ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}
      #   PV: gp:UPTIME

    - name: Confirm EPICS IOC is available via ophyd
      shell: bash -l {0}
      run: |
        source $CONDA/bin/activate $ENV_NAME
        CMD="import ophyd"
        CMD+="; up = ophyd.EpicsSignalRO('gp:UPTIME', name='up')"
        CMD+="; up.wait_for_connection()"
        CMD+="; print(up.get())"
        python -c "${CMD}"
      # env:
      #   PY_VER: ${{ matrix.python-version }}
      #   ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}
      #   PV: gp:UPTIME

    - name: Diagnostics
      shell: bash -l {0}
      run: |
        micromamba list --name $ENV_NAME
        micromamba list -r --name $ENV_NAME
      # env:
      #   PY_VER: ${{ matrix.python-version }}
      #   ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}

    - name: Install Redis & screen
      run: |
        sudo apt install redis screen

    - name: Run Bluesky queueserver
      shell: bash -l {0}
      run: |
        source $CONDA/bin/activate $ENV_NAME
        bash ./bluesky/qserver.sh run &
        # bash ./bluesky/qserver.sh start
        sleep 10
        bash ./bluesky/qserver.sh status
        qserver status
      # env:
      #   PY_VER: ${{ matrix.python-version }}
      #   ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}

    - name: Run tests with pytest & coverage
      shell: bash -l {0}
      run: |
        source $CONDA/bin/activate $ENV_NAME
        # proceed as in hklpy
        coverage run --concurrency=thread --parallel-mode -m pytest -vvv .
        coverage combine
        coverage report --precision 3
      # env:
      #   PY_VER: ${{ matrix.python-version }}
      #   ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}

    - name: Upload to coveralls
      shell: bash -l {0}
      # https://github.com/TheKevJames/coveralls-python
      run: |
        source $CONDA/bin/activate $ENV_NAME
        coveralls --service=github
      env:
        # PY_VER: ${{ matrix.python-version }}
        # ENV_NAME: anaconda-test-env-py-${{ matrix.python-version }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
