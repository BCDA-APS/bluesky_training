{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "6294a161",
   "metadata": {},
   "source": [
    "# Plot x, y data from a databroker run\n",
    "\n",
    "This Bluesky notebook only uses the `databroker` package (and `matplotlib`) to plot $(x,y)$ data from a previous measurement.\n",
    "\n",
    "## 1. Show what data catalogs are available"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06e7644f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['bdp2022',\n",
       " 'class_2021_03',\n",
       " '6idb_export',\n",
       " 'apstools_test',\n",
       " 'class_data_examples',\n",
       " 'usaxs_test',\n",
       " 'korts202106',\n",
       " 'training']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import databroker\n",
    "list(databroker.catalog)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12485b9f",
   "metadata": {},
   "source": [
    "## 2. Choose a specific run from a catalog\n",
    "\n",
    "Here, the `class_data_examples` catalog will be used.  As shown in step 3 below, the run with `scan_id=86` has a scan of detector vs. motor: (`m1`, `noisy`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "800e3e41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BlueskyRun\n",
       "  uid='d19530f7-1ca6-4c02-a83b-229b3d92b6d1'\n",
       "  exit_status='success'\n",
       "  2021-03-06 14:10:46.462 -- 2021-03-06 14:10:49.317\n",
       "  Streams:\n",
       "    * baseline\n",
       "    * primary\n"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat = databroker.catalog[\"class_data_examples\"]\n",
    "run = cat.v2[86]\n",
    "run"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33985994",
   "metadata": {},
   "source": [
    "## 3. Show the (primary) data\n",
    "\n",
    "Get all the data available from the `primary` stream.  The primary stream is where bluesky stores the data acquired from a scan.  `databroker` returns this data as an [xarray Dataset](http://xarray.pydata.org/en/stable/generated/xarray.Dataset.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3d832d0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:           (time: 23)\n",
       "Coordinates:\n",
       "  * time              (time) float64 1.615e+09 1.615e+09 ... 1.615e+09 1.615e+09\n",
       "Data variables:\n",
       "    m1                (time) float64 0.939 0.941 0.942 ... 0.968 0.969 0.971\n",
       "    m1_user_setpoint  (time) float64 0.9392 0.9407 0.9421 ... 0.9693 0.9708\n",
       "    noisy             (time) float64 8.589e+03 1.067e+04 ... 1.076e+04 8.774e+03</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-95c243ef-1345-432f-a482-9d38ece3fc8e' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-95c243ef-1345-432f-a482-9d38ece3fc8e' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 23</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-91b7d416-de01-43ce-b923-3e9ac755ce30' class='xr-section-summary-in' type='checkbox'  checked><label for='section-91b7d416-de01-43ce-b923-3e9ac755ce30' class='xr-section-summary' >Coordinates: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.615e+09 1.615e+09 ... 1.615e+09</div><input id='attrs-392e6156-8bff-4745-a556-02888dcd8718' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-392e6156-8bff-4745-a556-02888dcd8718' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f9d4a650-6507-4103-876b-8ab711040cb6' class='xr-var-data-in' type='checkbox'><label for='data-f9d4a650-6507-4103-876b-8ab711040cb6' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([1.615061e+09, 1.615061e+09, 1.615061e+09, 1.615061e+09, 1.615061e+09,\n",
       "       1.615061e+09, 1.615061e+09, 1.615061e+09, 1.615061e+09, 1.615061e+09,\n",
       "       1.615061e+09, 1.615061e+09, 1.615061e+09, 1.615061e+09, 1.615061e+09,\n",
       "       1.615061e+09, 1.615061e+09, 1.615061e+09, 1.615061e+09, 1.615061e+09,\n",
       "       1.615061e+09, 1.615061e+09, 1.615061e+09])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1395b83a-53a6-47a2-87df-fdc19aa7a9ce' class='xr-section-summary-in' type='checkbox'  checked><label for='section-1395b83a-53a6-47a2-87df-fdc19aa7a9ce' class='xr-section-summary' >Data variables: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>m1</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.939 0.941 0.942 ... 0.969 0.971</div><input id='attrs-320e6184-fb16-4f53-bf40-30af1a24aa28' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-320e6184-fb16-4f53-bf40-30af1a24aa28' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ccc0da11-11c6-47e1-857c-09a32a6e4442' class='xr-var-data-in' type='checkbox'><label for='data-ccc0da11-11c6-47e1-857c-09a32a6e4442' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>object :</span></dt><dd>m1</dd></dl></div><div class='xr-var-data'><pre>array([0.939, 0.941, 0.942, 0.944, 0.945, 0.946, 0.948, 0.949, 0.951,\n",
       "       0.952, 0.954, 0.955, 0.956, 0.958, 0.959, 0.961, 0.962, 0.964,\n",
       "       0.965, 0.966, 0.968, 0.969, 0.971])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>m1_user_setpoint</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.9392 0.9407 ... 0.9693 0.9708</div><input id='attrs-6a569681-c218-4377-aa52-c15cfa3756d9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-6a569681-c218-4377-aa52-c15cfa3756d9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f995d49a-0b22-4c97-b1df-cf76f6eccd23' class='xr-var-data-in' type='checkbox'><label for='data-f995d49a-0b22-4c97-b1df-cf76f6eccd23' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>object :</span></dt><dd>m1</dd></dl></div><div class='xr-var-data'><pre>array([0.93922358, 0.9406578 , 0.94209202, 0.94352624, 0.94496046,\n",
       "       0.94639468, 0.9478289 , 0.94926312, 0.95069734, 0.95213156,\n",
       "       0.95356578, 0.955     , 0.95643422, 0.95786844, 0.95930266,\n",
       "       0.96073688, 0.9621711 , 0.96360532, 0.96503954, 0.96647376,\n",
       "       0.96790798, 0.9693422 , 0.97077642])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>noisy</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>8.589e+03 1.067e+04 ... 8.774e+03</div><input id='attrs-8d9825ee-db5e-4dbf-a07a-32cc8033926d' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-8d9825ee-db5e-4dbf-a07a-32cc8033926d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7696def9-f17d-4017-a141-1d87210fa612' class='xr-var-data-in' type='checkbox'><label for='data-7696def9-f17d-4017-a141-1d87210fa612' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>object :</span></dt><dd>noisy</dd></dl></div><div class='xr-var-data'><pre>array([ 8589.32940855, 10673.5935127 , 12175.42592515, 16002.50003937,\n",
       "       19570.16387909, 22262.12759241, 32683.26999595, 37632.86194784,\n",
       "       56726.20388132, 70195.36934214, 91437.94502751, 97870.56104504,\n",
       "       92105.54803581, 69931.50593825, 57654.64241544, 40947.06521792,\n",
       "       31686.60297804, 22357.10017001, 19497.85944574, 17007.29364564,\n",
       "       12802.50606181, 10761.63637859,  8773.96384533])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-cf1decbc-ba54-416a-873e-51e138a67457' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-cf1decbc-ba54-416a-873e-51e138a67457' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:           (time: 23)\n",
       "Coordinates:\n",
       "  * time              (time) float64 1.615e+09 1.615e+09 ... 1.615e+09 1.615e+09\n",
       "Data variables:\n",
       "    m1                (time) float64 0.939 0.941 0.942 ... 0.968 0.969 0.971\n",
       "    m1_user_setpoint  (time) float64 0.9392 0.9407 0.9421 ... 0.9693 0.9708\n",
       "    noisy             (time) float64 8.589e+03 1.067e+04 ... 1.076e+04 8.774e+03"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = run.primary.read()\n",
    "dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86239bdb",
   "metadata": {},
   "source": [
    "## 4. Get data for the $x$ and $y$ axes\n",
    "\n",
    "Pick the `m1` (motor readback value) and `noisy` data for motor and detector, respectively.  These are [numpy ndarrays](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ab76d6fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "motor = dataset[\"m1\"].values\n",
    "detector = dataset[\"noisy\"].values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6d31ca4",
   "metadata": {},
   "source": [
    "## 5. Use MatPlotLib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f20a039e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2b35e38",
   "metadata": {},
   "source": [
    "## 6. Plot $(x,y)$ using matplotlib\n",
    "\n",
    "Follow the MatPlotLib [tutorial](https://matplotlib.org/stable/tutorials/introductory/pyplot.html) to learn how to customize this plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9198f7dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'noisy')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(motor, detector)\n",
    "plt.title(f\"scan_id={run.metadata['start']['scan_id']}\")\n",
    "plt.xlabel(dataset[\"m1\"].name)\n",
    "plt.ylabel(dataset[\"noisy\"].name)"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "fa399ef8ed4fbc3b7fe63ebf4307839a170374bf77134d519fcb3b724ac0582b"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
